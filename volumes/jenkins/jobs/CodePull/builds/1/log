Started by user [8mha:////4HnKjZN+oD4DT31ZtNN9dmzLAEs862P966TULyu0vz9IAAAAlx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzWEgZu/dLi1CL9gsS8lEQACjKVYMAAAAA=[0mpanda
Running as SYSTEM
Building in workspace /var/jenkins_home/workspace/CodePull
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/przemaj1990/panda_aplication
 > git init /var/jenkins_home/workspace/CodePull # timeout=10
Fetching upstream changes from https://github.com/przemaj1990/panda_aplication
 > git --version # timeout=10
 > git --version # 'git version 2.20.1'
 > git fetch --tags --force --progress -- https://github.com/przemaj1990/panda_aplication +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/przemaj1990/panda_aplication # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
Checking out Revision 8467d287c5192c5fcb43af37b5ac3baa7f51218c (refs/remotes/origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 8467d287c5192c5fcb43af37b5ac3baa7f51218c # timeout=10
Commit message: "testowy commit/drugi"
First time build. Skipping changelog.
[CodePull] $ /bin/sh -xe /tmp/jenkins12973007640337134995.sh
+ cat BaseConfig2.py
# source /Users/przemyslawmajdanski/Desktop/GeneralWorkspace/env/bin/activate
# brew install git
# cd Prepare/Vagrant 
# vagrant plugin install vagrant-docker-compose
# git clone https://github.com/PandaAcademy/Vagrant
# cd Vagrant/     
# git checkout Bare
# git branch 
# vagrant up
# sudo "/Library/Application Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh" restart
# - reinstall virtualboxa
# vagrant up
# vagrant ssh
# ------------------------------------
# ZajÄ™cia Pierwsze - Vagrant
# ------------------------------------
#  Vagrant:
#  - przechowuje konfig dla maszyn wirtualnych;
#  - 
# vagrant halt ab491d4
# vagrant destroy (usnie wszystko - lepiej wiÄ™c nie)
# vagrant ssh-config
# ------------------------------------
# ZajÄ™cia Drugie - GIT
# ------------------------------------
# git --version
# git init - na folderze ktÃ³ry nas interesuje tworze folder gira i wszystko poniej jest objete gitem
# git config -- system - dla wszystki uytkownikÃ³w
# git config -- global - pod konkretnego uytkownika
# git status - show status, nietrakowane/trakowane pliki
# pliki mogÄ… byÄ‡ trakc or untrack
# git add . - wszystko
# git add file 
# git add dodaje pliki do snapshota
# git commit -m 'nazwakomikakomentarz'
# tylko pliki ktÃ³re byÅ‚y poddane add przechodzÄ… do komita
# git log --oneline - pokazuje stan 
# git log 
# git log --graph --simplify-by-decoration --pretty=format:'%d' --all
# git log --graph
# rm <plik> + git add - by wywaliÄ‡ plik z repo
# git rm <file>
# git reset --sofr - cofa do staggingu danÄ… wersje commita;
# git checkout - zaÅ‚aduje heada
# git checkout <id> przechodzimy do starego commita
# git checkout master
# git branch dev && git checkout dev
# git checkout -b dev 
# git branch -d <dev> usuwamy
# git config alias.st status -> w efekcie git st bÄ™dzie dziaÅ‚aÅ‚o jak git status
# git branch -D dev
# ------------------------------------
# ZajÄ™cia Trzecie - Marven
# ------------------------------------
# artefakt - zbudowana aplikacja
# jdk - java development kid (ma w Å›rodku maszynÄ™ wirtualnÄ… +  standardowe blibliteki = jre (java runtime enviromnet - wszystko do uruchomienia app) + wszystkie narzÄ™dzia developerskie )
# sudo apt install default-jdk
# sudo apt update
# zdefinuj zmienne dla javy:
#   export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
#   export PATH=$JAVA_HOME/bin:$PATH
# java -version
# javac -version
# javac src/main/java/pl/pandait/Intro.java -d target -kompilacja paczek do javy
# javac $(find . -name "*.java") -d target
# jar cfm target/Intro.jar Project/JavaIntro/manifest.txt -C target .   - budowanie archiwum jar
# java -jar target/Intro.jar  -sprawdzanie
# javac $(find . -name "*.java") -cp src/resources/lib/\* -d target
# Main-Class: pl.pandait.Intro
# Class-Path: /home/panda/projects/JavaIntro/src/resources/lib/chuck-0.0.2.jar
# 
# Maven:
# - struktura projektu jest wazna
# sudo apt install maven
# export M2_HOME=/usr/share/maven
# export MAVEN_HOME=/usr/share/maven
# export PATH=${M2_HOME}/bin:${PATH}
# mvn clean
# git clone https://github.com/PandaAcademy/panda_application.git
# git remote -v
# git remote set-url origin --push https://github.com/przemaj1990/panda_aplication.git
# git init
# git remote set-url origin https://github.com/PandaAcademy/panda_application.git
# git remote set-url origin --push https://github.com/przemaj1990/panda_aplication.git
# git push origin master
# git config --global user.email "przemaj1990@gmail.com"
# git config --global user.name "przemaj1990"
# git commit -m 'testowy commit/pierwszy'
# git pushFinished: SUCCESS
